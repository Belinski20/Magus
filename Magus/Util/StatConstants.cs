using Magus.Entity;
using Magus.Properties;
using Magus.Items;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Magus.Util
{
    class StatConstants
    {
        public static SortedDictionary<EnemyTypes, int> speedMap;
        public static SortedDictionary<EnemyTypes, int> strengthMap;
        public static SortedDictionary<EnemyTypes, int> wisdomMap;
        public static SortedDictionary<EnemyTypes, int> skillMap;
        public static SortedDictionary<EnemyTypes, int> healthMap;
        public static SortedDictionary<EnemyTypes, int> powerMap;
        public static SortedDictionary<EnemyTypes, int> rankMap;
        public static SortedDictionary<EnemyTypes, Image> iconMap;
        public static SortedDictionary<ClassTypes, int> playerSpeedMap;
        public static SortedDictionary<ClassTypes, int> playerStrengthMap;
        public static SortedDictionary<ClassTypes, int> playerWisdomMap;
        public static SortedDictionary<ClassTypes, int> playerSkillMap;
        public static SortedDictionary<ClassTypes, int> playerHealthMap;
        public static SortedDictionary<ClassTypes, int> playerPowerMap;
        public static SortedDictionary<ClassTypes, Image> playerIconMapMale;
        public static SortedDictionary<ClassTypes, Image> playerIconMapFemale;
        public static SortedDictionary<ItemTypes, String> NameMap;
        public static SortedDictionary<ItemTypes, ItemClass> KindMap;
        public static SortedDictionary<ItemTypes, ItemReq> RequiresMap;
        public static SortedDictionary<ItemTypes, Image> itemIconMap;
        static StatConstants()
        {
            //initialize speed map
            speedMap = new SortedDictionary<EnemyTypes, int>();
            speedMap.Add(EnemyTypes.Skeleton, 4);
            speedMap.Add(EnemyTypes.Zombie, 4);
            speedMap.Add(EnemyTypes.HobGoblin, 5);
            speedMap.Add(EnemyTypes.Goblin, 4);
            speedMap.Add(EnemyTypes.Troll, 3);
            speedMap.Add(EnemyTypes.OrchFighter, 4);
            speedMap.Add(EnemyTypes.OrchKnight, 4);
            speedMap.Add(EnemyTypes.OrchMage, 4);
            speedMap.Add(EnemyTypes.OrchRanger, 4);
            speedMap.Add(EnemyTypes.Magician, 4);
            speedMap.Add(EnemyTypes.Monk, 4);
            speedMap.Add(EnemyTypes.Warrior, 4);
            speedMap.Add(EnemyTypes.ChaosKnight, 4);
            speedMap.Add(EnemyTypes.Ghost, 4);
            speedMap.Add(EnemyTypes.Minotaur, 4);
            speedMap.Add(EnemyTypes.Undead, 5);
            speedMap.Add(EnemyTypes.Spirit, 5);
            speedMap.Add(EnemyTypes.Sorcerer, 5);
            speedMap.Add(EnemyTypes.WitchLord, 5);
            speedMap.Add(EnemyTypes.DeathKnight, 4);
            speedMap.Add(EnemyTypes.ChaosWarrior, 4);
            speedMap.Add(EnemyTypes.Guardian, 5);
            speedMap.Add(EnemyTypes.DeathLord, 5);
            speedMap.Add(EnemyTypes.Dragon, 8);
            speedMap.Add(EnemyTypes.SmallOne, 8);
            speedMap.Add(EnemyTypes.Djinn, 14);
            speedMap.Add(EnemyTypes.Fenix, 5);
            speedMap.Add(EnemyTypes.Undine, 6);
            speedMap.Add(EnemyTypes.Golem, 3);
            speedMap.Add(EnemyTypes.Demon, 6);
            speedMap.Add(EnemyTypes.ShadowBeast, 5);
            speedMap.Add(EnemyTypes.Lightning, 8);
            speedMap.Add(EnemyTypes.DemonPrince, 6);
            speedMap.Add(EnemyTypes.TheDarkOne, 7);

            //initialize strength map
            strengthMap = new SortedDictionary<EnemyTypes, int>();
            strengthMap.Add(EnemyTypes.Skeleton, 7);
            strengthMap.Add(EnemyTypes.Zombie, 12);
            strengthMap.Add(EnemyTypes.HobGoblin, 10);
            strengthMap.Add(EnemyTypes.Goblin, 8);
            strengthMap.Add(EnemyTypes.Troll, 20);
            strengthMap.Add(EnemyTypes.OrchFighter, 14);
            strengthMap.Add(EnemyTypes.OrchKnight, 15);
            strengthMap.Add(EnemyTypes.OrchMage, 12);
            strengthMap.Add(EnemyTypes.OrchRanger, 13);
            strengthMap.Add(EnemyTypes.Magician, 12);
            strengthMap.Add(EnemyTypes.Monk, 14);
            strengthMap.Add(EnemyTypes.Warrior, 12);
            strengthMap.Add(EnemyTypes.ChaosKnight, 22);
            strengthMap.Add(EnemyTypes.Ghost, 10);
            strengthMap.Add(EnemyTypes.Minotaur, 20);
            strengthMap.Add(EnemyTypes.Undead, 17);
            strengthMap.Add(EnemyTypes.Spirit, 50);
            strengthMap.Add(EnemyTypes.Sorcerer, 25);
            strengthMap.Add(EnemyTypes.WitchLord, 20);
            strengthMap.Add(EnemyTypes.DeathKnight, 40);
            strengthMap.Add(EnemyTypes.ChaosWarrior, 30);
            strengthMap.Add(EnemyTypes.Guardian, 22);
            strengthMap.Add(EnemyTypes.DeathLord, 25);
            strengthMap.Add(EnemyTypes.Dragon, 60);
            strengthMap.Add(EnemyTypes.SmallOne, 8);
            strengthMap.Add(EnemyTypes.Djinn, 1);
            strengthMap.Add(EnemyTypes.Fenix, 10);
            strengthMap.Add(EnemyTypes.Undine, 20);
            strengthMap.Add(EnemyTypes.Golem, 60);
            strengthMap.Add(EnemyTypes.Demon, 50);
            strengthMap.Add(EnemyTypes.ShadowBeast, 20);
            strengthMap.Add(EnemyTypes.Lightning, 4);
            strengthMap.Add(EnemyTypes.DemonPrince, 30);
            strengthMap.Add(EnemyTypes.TheDarkOne, 80);

            //initialize wisdom map
            wisdomMap = new SortedDictionary<EnemyTypes, int>();
            wisdomMap.Add(EnemyTypes.Skeleton, 0);
            wisdomMap.Add(EnemyTypes.Zombie, 0);
            wisdomMap.Add(EnemyTypes.HobGoblin, 0);
            wisdomMap.Add(EnemyTypes.Goblin, 0);
            wisdomMap.Add(EnemyTypes.Troll, 0);
            wisdomMap.Add(EnemyTypes.OrchFighter, 0);
            wisdomMap.Add(EnemyTypes.OrchKnight, 0);
            wisdomMap.Add(EnemyTypes.OrchMage, 12);
            wisdomMap.Add(EnemyTypes.OrchRanger, 0);
            wisdomMap.Add(EnemyTypes.Magician, 10);
            wisdomMap.Add(EnemyTypes.Monk, 11);
            wisdomMap.Add(EnemyTypes.Warrior, 0);
            wisdomMap.Add(EnemyTypes.ChaosKnight, 0);
            wisdomMap.Add(EnemyTypes.Ghost, 10);
            wisdomMap.Add(EnemyTypes.Minotaur, 0);
            wisdomMap.Add(EnemyTypes.Undead, 16);
            wisdomMap.Add(EnemyTypes.Spirit, 15);
            wisdomMap.Add(EnemyTypes.Sorcerer, 20);
            wisdomMap.Add(EnemyTypes.WitchLord, 20);
            wisdomMap.Add(EnemyTypes.DeathKnight, 20);
            wisdomMap.Add(EnemyTypes.ChaosWarrior, 0);
            wisdomMap.Add(EnemyTypes.Guardian, 0);
            wisdomMap.Add(EnemyTypes.DeathLord, 20);
            wisdomMap.Add(EnemyTypes.Dragon, 25);
            wisdomMap.Add(EnemyTypes.SmallOne, 0);
            wisdomMap.Add(EnemyTypes.Djinn, 0);
            wisdomMap.Add(EnemyTypes.Fenix, 19);
            wisdomMap.Add(EnemyTypes.Undine, 0);
            wisdomMap.Add(EnemyTypes.Golem, 0);
            wisdomMap.Add(EnemyTypes.Demon, 10);
            wisdomMap.Add(EnemyTypes.ShadowBeast, 0);
            wisdomMap.Add(EnemyTypes.Lightning, 14);
            wisdomMap.Add(EnemyTypes.DemonPrince, 0);
            wisdomMap.Add(EnemyTypes.TheDarkOne, 25);

            //initialize skill map
            skillMap = new SortedDictionary<EnemyTypes, int>();
            skillMap.Add(EnemyTypes.Skeleton, 7);
            skillMap.Add(EnemyTypes.Zombie, 10);
            skillMap.Add(EnemyTypes.HobGoblin, 9);
            skillMap.Add(EnemyTypes.Goblin, 14);
            skillMap.Add(EnemyTypes.Troll, 7);
            skillMap.Add(EnemyTypes.OrchFighter, 9);
            skillMap.Add(EnemyTypes.OrchKnight, 13);
            skillMap.Add(EnemyTypes.OrchMage, 5);
            skillMap.Add(EnemyTypes.OrchRanger, 10);
            skillMap.Add(EnemyTypes.Magician, 10);
            skillMap.Add(EnemyTypes.Monk, 16);
            skillMap.Add(EnemyTypes.Warrior, 14);
            skillMap.Add(EnemyTypes.ChaosKnight, 16);
            skillMap.Add(EnemyTypes.Ghost, 15);
            skillMap.Add(EnemyTypes.Minotaur, 12);
            skillMap.Add(EnemyTypes.Undead, 20);
            skillMap.Add(EnemyTypes.Spirit, 15);
            skillMap.Add(EnemyTypes.Sorcerer, 20);
            skillMap.Add(EnemyTypes.WitchLord, 20);
            skillMap.Add(EnemyTypes.DeathKnight, 20);
            skillMap.Add(EnemyTypes.ChaosWarrior, 19);
            skillMap.Add(EnemyTypes.Guardian, 19);
            skillMap.Add(EnemyTypes.DeathLord, 20);
            skillMap.Add(EnemyTypes.Dragon, 25);
            skillMap.Add(EnemyTypes.SmallOne, 0);
            skillMap.Add(EnemyTypes.Djinn, 0);
            skillMap.Add(EnemyTypes.Fenix, 17);
            skillMap.Add(EnemyTypes.Undine, 15);
            skillMap.Add(EnemyTypes.Golem, 10);
            skillMap.Add(EnemyTypes.Demon, 17);
            skillMap.Add(EnemyTypes.ShadowBeast, 10);
            skillMap.Add(EnemyTypes.Lightning, 0);
            skillMap.Add(EnemyTypes.DemonPrince, 20);
            skillMap.Add(EnemyTypes.TheDarkOne, 25);

            //health map initialization
            healthMap = new SortedDictionary<EnemyTypes, int>();
            healthMap.Add(EnemyTypes.Skeleton, 30);
            healthMap.Add(EnemyTypes.Zombie, 10);
            healthMap.Add(EnemyTypes.HobGoblin, 10);
            healthMap.Add(EnemyTypes.Goblin, 30);
            healthMap.Add(EnemyTypes.Troll, 100);
            healthMap.Add(EnemyTypes.OrchFighter, 50);
            healthMap.Add(EnemyTypes.OrchKnight, 60);
            healthMap.Add(EnemyTypes.OrchMage, 40);
            healthMap.Add(EnemyTypes.OrchRanger, 50);
            healthMap.Add(EnemyTypes.Magician, 50);
            healthMap.Add(EnemyTypes.Monk, 60);
            healthMap.Add(EnemyTypes.Warrior, 80);
            healthMap.Add(EnemyTypes.ChaosKnight, 100);
            healthMap.Add(EnemyTypes.Ghost, 20);
            healthMap.Add(EnemyTypes.Minotaur, 80);
            healthMap.Add(EnemyTypes.Undead, 70);
            healthMap.Add(EnemyTypes.Spirit, 40);
            healthMap.Add(EnemyTypes.Sorcerer, 150);
            healthMap.Add(EnemyTypes.WitchLord, 100);
            healthMap.Add(EnemyTypes.DeathKnight, 200);
            healthMap.Add(EnemyTypes.ChaosWarrior, 300);
            healthMap.Add(EnemyTypes.Guardian, 200);
            healthMap.Add(EnemyTypes.DeathLord, 200);
            healthMap.Add(EnemyTypes.Dragon, 600);
            healthMap.Add(EnemyTypes.SmallOne, 10);
            healthMap.Add(EnemyTypes.Djinn, 1);
            healthMap.Add(EnemyTypes.Fenix, 40);
            healthMap.Add(EnemyTypes.Undine, 30);
            healthMap.Add(EnemyTypes.Golem, 20);
            healthMap.Add(EnemyTypes.Demon, 200);
            healthMap.Add(EnemyTypes.ShadowBeast, 200);
            healthMap.Add(EnemyTypes.Lightning, 1);
            healthMap.Add(EnemyTypes.DemonPrince, 500);
            healthMap.Add(EnemyTypes.TheDarkOne, 500);

            //initialize power map
            powerMap = new SortedDictionary<EnemyTypes, int>();
            powerMap.Add(EnemyTypes.Skeleton, 0);
            powerMap.Add(EnemyTypes.Zombie, 0);
            powerMap.Add(EnemyTypes.HobGoblin, 0);
            powerMap.Add(EnemyTypes.Goblin, 0);
            powerMap.Add(EnemyTypes.Troll, 0);
            powerMap.Add(EnemyTypes.OrchFighter, 0);
            powerMap.Add(EnemyTypes.OrchKnight, 0);
            powerMap.Add(EnemyTypes.OrchMage, 20);
            powerMap.Add(EnemyTypes.OrchRanger, 0);
            powerMap.Add(EnemyTypes.Magician, 30);
            powerMap.Add(EnemyTypes.Monk, 20);
            powerMap.Add(EnemyTypes.Warrior, 0);
            powerMap.Add(EnemyTypes.ChaosKnight, 0);
            powerMap.Add(EnemyTypes.Ghost, 10);
            powerMap.Add(EnemyTypes.Minotaur, 0);
            powerMap.Add(EnemyTypes.Undead, 15);
            powerMap.Add(EnemyTypes.Spirit, 10);
            powerMap.Add(EnemyTypes.Sorcerer, 150);
            powerMap.Add(EnemyTypes.WitchLord, 100);
            powerMap.Add(EnemyTypes.DeathKnight, 20);
            powerMap.Add(EnemyTypes.ChaosWarrior, 0);
            powerMap.Add(EnemyTypes.Guardian, 0);
            powerMap.Add(EnemyTypes.DeathLord, 100);
            powerMap.Add(EnemyTypes.Dragon, 300);
            powerMap.Add(EnemyTypes.SmallOne, 0);
            powerMap.Add(EnemyTypes.Djinn, 0);
            powerMap.Add(EnemyTypes.Fenix, 5);
            powerMap.Add(EnemyTypes.Undine, 0);
            powerMap.Add(EnemyTypes.Golem, 0);
            powerMap.Add(EnemyTypes.Demon, 20);
            powerMap.Add(EnemyTypes.ShadowBeast, 0);
            powerMap.Add(EnemyTypes.Lightning, 10);
            powerMap.Add(EnemyTypes.DemonPrince, 0);
            powerMap.Add(EnemyTypes.TheDarkOne, 1000);

            //initialize rank map
            rankMap = new SortedDictionary<EnemyTypes, int>();
            rankMap.Add(EnemyTypes.Skeleton, 0);
            rankMap.Add(EnemyTypes.Zombie, 0);
            rankMap.Add(EnemyTypes.HobGoblin, 10);
            rankMap.Add(EnemyTypes.Goblin, 10);
            rankMap.Add(EnemyTypes.Troll, 20);
            rankMap.Add(EnemyTypes.OrchFighter, 40);
            rankMap.Add(EnemyTypes.OrchKnight, 80);
            rankMap.Add(EnemyTypes.OrchMage, 80);
            rankMap.Add(EnemyTypes.OrchRanger, 40);
            rankMap.Add(EnemyTypes.Magician, 30);
            rankMap.Add(EnemyTypes.Monk, 20);
            rankMap.Add(EnemyTypes.Warrior, 0);
            rankMap.Add(EnemyTypes.ChaosKnight, 100);
            rankMap.Add(EnemyTypes.Ghost, 100);
            rankMap.Add(EnemyTypes.Minotaur, 100);
            rankMap.Add(EnemyTypes.Undead, 100);
            rankMap.Add(EnemyTypes.Spirit, 120);
            rankMap.Add(EnemyTypes.Sorcerer, 120);
            rankMap.Add(EnemyTypes.WitchLord, 140);
            rankMap.Add(EnemyTypes.DeathKnight, 170);
            rankMap.Add(EnemyTypes.ChaosWarrior, 200);
            rankMap.Add(EnemyTypes.Guardian, 200);
            rankMap.Add(EnemyTypes.DeathLord, 230);
            rankMap.Add(EnemyTypes.Dragon, 250);
            rankMap.Add(EnemyTypes.SmallOne, 1200);
            rankMap.Add(EnemyTypes.Djinn, -1);
            rankMap.Add(EnemyTypes.Fenix, -1);
            rankMap.Add(EnemyTypes.Undine, -1);
            rankMap.Add(EnemyTypes.Golem, -1);
            rankMap.Add(EnemyTypes.Demon, -1);
            rankMap.Add(EnemyTypes.ShadowBeast, -1);
            rankMap.Add(EnemyTypes.Lightning, -1);
            rankMap.Add(EnemyTypes.DemonPrince, -1);
            rankMap.Add(EnemyTypes.TheDarkOne, -1);

            //initialize icon map
            iconMap = new SortedDictionary<EnemyTypes, Image>();
            iconMap.Add(EnemyTypes.Skeleton, Resources.Skeleton);
            iconMap.Add(EnemyTypes.Zombie, Resources.Zombie);
            iconMap.Add(EnemyTypes.HobGoblin, Resources.Hobgoblin);
            iconMap.Add(EnemyTypes.Goblin, Resources.Goblin);
            iconMap.Add(EnemyTypes.Troll, Resources.Troll);
            iconMap.Add(EnemyTypes.OrchFighter, Resources.OrchFighter);
            iconMap.Add(EnemyTypes.OrchKnight, Resources.OrchKnight);
            iconMap.Add(EnemyTypes.OrchMage, Resources.OrchMage);
            iconMap.Add(EnemyTypes.OrchRanger, Resources.OrchRanger);
            iconMap.Add(EnemyTypes.Magician, Resources.SmallOneMage);
            iconMap.Add(EnemyTypes.Monk, Resources.Monk);
            iconMap.Add(EnemyTypes.Warrior, Resources.Warrior);
            iconMap.Add(EnemyTypes.ChaosKnight, Resources.ChaosKnight);
            iconMap.Add(EnemyTypes.Ghost, Resources.Ghost);
            iconMap.Add(EnemyTypes.Minotaur, Resources.Minotaur);
            iconMap.Add(EnemyTypes.Undead, Resources.Undead);
            iconMap.Add(EnemyTypes.Spirit, Resources.Spirit);
            iconMap.Add(EnemyTypes.Sorcerer, Resources.Sorcerer);
            iconMap.Add(EnemyTypes.WitchLord, Resources.WitchLord);
            iconMap.Add(EnemyTypes.DeathKnight, Resources.DeathKnight);
            iconMap.Add(EnemyTypes.ChaosWarrior, Resources.ChaosWarrior);
            iconMap.Add(EnemyTypes.Guardian, Resources.Guardian);
            iconMap.Add(EnemyTypes.DeathLord, Resources.DeathLord);
            iconMap.Add(EnemyTypes.Dragon, Resources.Dragon);
            iconMap.Add(EnemyTypes.SmallOne, Resources.SmallOne);
            iconMap.Add(EnemyTypes.Djinn, Resources.Djinn);
            iconMap.Add(EnemyTypes.Fenix, Resources.Fenix);
            iconMap.Add(EnemyTypes.Undine, Resources.Undine);
            iconMap.Add(EnemyTypes.Golem, Resources.GolemBrown);
            iconMap.Add(EnemyTypes.Demon, Resources.Demon);
            iconMap.Add(EnemyTypes.ShadowBeast, Resources.ShadowBeast);
            iconMap.Add(EnemyTypes.Lightning, Resources.Lightning);
            iconMap.Add(EnemyTypes.DemonPrince, Resources.DemonPrince);
            iconMap.Add(EnemyTypes.TheDarkOne, Resources.DarkOne);

            //player statistics
            //player speed
            playerSpeedMap = new SortedDictionary<ClassTypes, int>();
            playerSpeedMap.Add(ClassTypes.Barbarian, 4);
            playerSpeedMap.Add(ClassTypes.Druid, 4);
            playerSpeedMap.Add(ClassTypes.Duck, 5);
            playerSpeedMap.Add(ClassTypes.DuckMage, 5);
            playerSpeedMap.Add(ClassTypes.Dwarf, 4);
            playerSpeedMap.Add(ClassTypes.Elf, 6);
            playerSpeedMap.Add(ClassTypes.Knight, 4);
            playerSpeedMap.Add(ClassTypes.Shaman, 6);
            playerSpeedMap.Add(ClassTypes.Wizard, 4);

            //player strength
            playerStrengthMap = new SortedDictionary<ClassTypes, int>();
            playerStrengthMap.Add(ClassTypes.Barbarian, 17);
            playerStrengthMap.Add(ClassTypes.Druid, 14);
            playerStrengthMap.Add(ClassTypes.Duck, 14);
            playerStrengthMap.Add(ClassTypes.DuckMage, 10);
            playerStrengthMap.Add(ClassTypes.Dwarf, 20);
            playerStrengthMap.Add(ClassTypes.Elf, 14);
            playerStrengthMap.Add(ClassTypes.Knight, 24);
            playerStrengthMap.Add(ClassTypes.Shaman, 9);
            playerStrengthMap.Add(ClassTypes.Wizard, 12);

            //player wisdom
            playerWisdomMap = new SortedDictionary<ClassTypes, int>();
            playerWisdomMap.Add(ClassTypes.Barbarian, 0);
            playerWisdomMap.Add(ClassTypes.Druid, 10);
            playerWisdomMap.Add(ClassTypes.Duck, 0);
            playerWisdomMap.Add(ClassTypes.DuckMage, 12);
            playerWisdomMap.Add(ClassTypes.Dwarf, 0);
            playerWisdomMap.Add(ClassTypes.Elf, 0);
            playerWisdomMap.Add(ClassTypes.Knight, 0);
            playerWisdomMap.Add(ClassTypes.Shaman, 15);
            playerWisdomMap.Add(ClassTypes.Wizard, 12);

            //player skill
            playerSkillMap = new SortedDictionary<ClassTypes, int>();
            playerSkillMap.Add(ClassTypes.Barbarian, 15);
            playerSkillMap.Add(ClassTypes.Druid, 10);
            playerSkillMap.Add(ClassTypes.Duck, 17);
            playerSkillMap.Add(ClassTypes.DuckMage, 9);
            playerSkillMap.Add(ClassTypes.Dwarf, 12);
            playerSkillMap.Add(ClassTypes.Elf, 15);
            playerSkillMap.Add(ClassTypes.Knight, 11);
            playerSkillMap.Add(ClassTypes.Shaman, 7);
            playerSkillMap.Add(ClassTypes.Wizard, 10);

            //player health
            playerHealthMap = new SortedDictionary<ClassTypes, int>();
            playerHealthMap.Add(ClassTypes.Barbarian, 120);
            playerHealthMap.Add(ClassTypes.Druid, 80);
            playerHealthMap.Add(ClassTypes.Duck, 100);
            playerHealthMap.Add(ClassTypes.DuckMage, 40);
            playerHealthMap.Add(ClassTypes.Dwarf, 120);
            playerHealthMap.Add(ClassTypes.Elf, 90);
            playerHealthMap.Add(ClassTypes.Knight, 90);
            playerHealthMap.Add(ClassTypes.Shaman, 30);
            playerHealthMap.Add(ClassTypes.Wizard, 50);

            //player power
            playerPowerMap = new SortedDictionary<ClassTypes, int>();
            playerPowerMap.Add(ClassTypes.Barbarian, 0);
            playerPowerMap.Add(ClassTypes.Druid, 20);
            playerPowerMap.Add(ClassTypes.Duck, 0);
            playerPowerMap.Add(ClassTypes.DuckMage, 60);
            playerPowerMap.Add(ClassTypes.Dwarf, 0);
            playerPowerMap.Add(ClassTypes.Elf, 0);
            playerPowerMap.Add(ClassTypes.Knight, 0);
            playerPowerMap.Add(ClassTypes.Shaman, 40);
            playerPowerMap.Add(ClassTypes.Wizard, 50);

            //player images male
            playerIconMapMale = new SortedDictionary<ClassTypes, Image>();
            playerIconMapMale.Add(ClassTypes.Barbarian, Resources.BarbarianMale);
            playerIconMapMale.Add(ClassTypes.Druid, Resources.DruidMale);
            playerIconMapMale.Add(ClassTypes.Duck, Resources.Duck);
            playerIconMapMale.Add(ClassTypes.DuckMage, Resources.DuckMageMale);
            playerIconMapMale.Add(ClassTypes.Dwarf, Resources.DwarfMale);
            playerIconMapMale.Add(ClassTypes.Elf, Resources.ElfMale);
            playerIconMapMale.Add(ClassTypes.Knight, Resources.Knight);
            playerIconMapMale.Add(ClassTypes.Shaman, Resources.ShamanMale);
            playerIconMapMale.Add(ClassTypes.Wizard, Resources.WizardMale);


            //player images female
            playerIconMapFemale = new SortedDictionary<ClassTypes, Image>();
            playerIconMapFemale.Add(ClassTypes.Barbarian, Resources.BarbarianFemale);
            playerIconMapFemale.Add(ClassTypes.Druid, Resources.DruidFemale);
            playerIconMapFemale.Add(ClassTypes.Duck, Resources.Duck);
            playerIconMapFemale.Add(ClassTypes.DuckMage, Resources.DuckMageFemale);
            playerIconMapFemale.Add(ClassTypes.Dwarf, Resources.DwarfFemale);
            playerIconMapFemale.Add(ClassTypes.Elf, Resources.ElfFemale);
            playerIconMapFemale.Add(ClassTypes.Knight, Resources.FemaleKnight);
            playerIconMapFemale.Add(ClassTypes.Shaman, Resources.ShamanFemale);
            playerIconMapFemale.Add(ClassTypes.Wizard, Resources.WizardFemale);


         //item kind
         KindMap = new SortedDictionary<ItemTypes, ItemClass>();
         KindMap.Add(ItemTypes.Sword, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.h2Sword, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.Axe, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.Dagger, ItemClass.O_CLASS_MIXEDWEAPON);
         KindMap.Add(ItemTypes.Bow, ItemClass.O_CLASS_RANGEDWEAPON);
         KindMap.Add(ItemTypes.Crossbow, ItemClass.O_CLASS_RANGEDWEAPON);
         KindMap.Add(ItemTypes.ThrowingStar, ItemClass.O_CLASS_THROWINGWEAPON);
         KindMap.Add(ItemTypes.Fireblade, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.Helmet, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.Shield, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.Leather, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.Armour, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.Emerald, ItemClass.O_CLASS_GADGET);
         KindMap.Add(ItemTypes.EmeraldRing, ItemClass.O_CLASS_GADGET);
         KindMap.Add(ItemTypes.Arrows, ItemClass.O_CLASS_ARROWS);
         KindMap.Add(ItemTypes.StuddedLeather, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.LightningBolt, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.FireBall, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Portal, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.Air, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Fire, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Water, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Earth, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Skeleton, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Zombie, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Vision, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Phantom, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Slayer, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.FastFeet, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Heal, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.StoneAxe, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.Gloves, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.Darkness, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Sabre, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.Staff, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.Chaos, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Demon, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Cloak, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.BigShield, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.BigHelmet, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.OpalRing, ItemClass.O_CLASS_GADGET);
         KindMap.Add(ItemTypes.Club, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.Topaz, ItemClass.O_CLASS_GADGET);
         KindMap.Add(ItemTypes.Opal, ItemClass.O_CLASS_GADGET);
         KindMap.Add(ItemTypes.StoneFoot, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Lightning, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.DragonTooth, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.SunsEdge, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.SilverBow, ItemClass.O_CLASS_RANGEDWEAPON);
         KindMap.Add(ItemTypes.Bubble, ItemClass.O_CLASS_TRINKET);
         KindMap.Add(ItemTypes.Faithful, ItemClass.O_CLASS_ARROWS);
         KindMap.Add(ItemTypes.SunBow, ItemClass.O_CLASS_SPECIAL);
         KindMap.Add(ItemTypes.Chock, ItemClass.O_CLASS_SPECIAL);
         KindMap.Add(ItemTypes.BloodTaste, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.SunArmour, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.ElvenCloak, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.Focus, ItemClass.O_CLASS_GADGET);
         KindMap.Add(ItemTypes.Terror, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Berzerk, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Protection, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Leadball, ItemClass.O_CLASS_THROWINGWEAPON);
         KindMap.Add(ItemTypes.WoodenShield, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.Wakizashi, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.SunHelmet, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.SunShield, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.ThunderStorm, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.HyperSpace, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Panic, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.ShootingStar, ItemClass.O_CLASS_SPECIAL);
         KindMap.Add(ItemTypes.Inferno, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Negator, ItemClass.O_CLASS_TRINKET);
         KindMap.Add(ItemTypes.ChainNBall, ItemClass.O_CLASS_WEAPON);
         KindMap.Add(ItemTypes.SunGloves, ItemClass.O_CLASS_ARMOR);
         KindMap.Add(ItemTypes.Delay, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.GhostBlade, ItemClass.O_CLASS_SPECIAL);
         KindMap.Add(ItemTypes.Enchant, ItemClass.O_CLASS_SPECIAL);
         KindMap.Add(ItemTypes.Purify, ItemClass.O_CLASS_SPELL);
         KindMap.Add(ItemTypes.Blue, ItemClass.O_CLASS_POTION);
         KindMap.Add(ItemTypes.Green, ItemClass.O_CLASS_POTION);
         KindMap.Add(ItemTypes.Yellow, ItemClass.O_CLASS_POTION);
         KindMap.Add(ItemTypes.Brown, ItemClass.O_CLASS_POTION);
         KindMap.Add(ItemTypes.Red, ItemClass.O_CLASS_POTION);
         KindMap.Add(ItemTypes.Grey, ItemClass.O_CLASS_POTION);
         KindMap.Add(ItemTypes.White, ItemClass.O_CLASS_POTION);
         KindMap.Add(ItemTypes.Purple, ItemClass.O_CLASS_POTION);
         KindMap.Add(ItemTypes.Black, ItemClass.O_CLASS_POTION);



         itemIconMap = new SortedDictionary<ItemTypes, Image>();
         itemIconMap.Add(ItemTypes.Sword, Resources.Sword);
         itemIconMap.Add(ItemTypes.h2Sword, Resources._2h_Sword );
         itemIconMap.Add(ItemTypes.Axe, Resources._1h_Axe);
         itemIconMap.Add(ItemTypes.Dagger, Resources.Dagger);
         itemIconMap.Add(ItemTypes.Bow, Resources.Bow);
         itemIconMap.Add(ItemTypes.Crossbow, Resources.CrossBow);
         itemIconMap.Add(ItemTypes.ThrowingStar, Resources.ThrowingStar);
         itemIconMap.Add(ItemTypes.Fireblade, Resources.FireBlade);
         itemIconMap.Add(ItemTypes.Helmet, Resources.Helmet);
         itemIconMap.Add(ItemTypes.Shield, Resources.Shield);
         itemIconMap.Add(ItemTypes.Leather, Resources.Leather);
         itemIconMap.Add(ItemTypes.Armour, Resources.Armor);
         itemIconMap.Add(ItemTypes.Emerald, Resources.Emerald);
         itemIconMap.Add(ItemTypes.EmeraldRing, Resources.EmeraldRing);
         itemIconMap.Add(ItemTypes.Arrows, Resources.Arrows);
         itemIconMap.Add(ItemTypes.StuddedLeather, Resources.StuddedLeather);
         itemIconMap.Add(ItemTypes.LightningBolt, Resources.SpellLightningBolt);
         itemIconMap.Add(ItemTypes.FireBall, Resources.SpellFireball);
         itemIconMap.Add(ItemTypes.Portal, Resources.SpellPortal);
         itemIconMap.Add(ItemTypes.Air, Resources.SpellAir);
         itemIconMap.Add(ItemTypes.Fire, Resources.SpellFire);
         itemIconMap.Add(ItemTypes.Water, Resources.SpellWater);
         itemIconMap.Add(ItemTypes.Earth, Resources.SpellEarth);
         itemIconMap.Add(ItemTypes.Skeleton, Resources.SpellSkeleton);
         itemIconMap.Add(ItemTypes.Zombie, Resources.SpellZombie);
         itemIconMap.Add(ItemTypes.Vision, Resources.SpellVision);
         itemIconMap.Add(ItemTypes.Phantom, Resources.SpellPhantom);
         itemIconMap.Add(ItemTypes.Slayer, Resources.Slayer);
         itemIconMap.Add(ItemTypes.FastFeet, Resources.SpellFastFeet);
         itemIconMap.Add(ItemTypes.Heal, Resources.SpellHeal);
         itemIconMap.Add(ItemTypes.StoneAxe, Resources.StoneAxe);
         itemIconMap.Add(ItemTypes.Gloves, Resources.Gloves);
         itemIconMap.Add(ItemTypes.Darkness, Resources.SpellDarkness);
         itemIconMap.Add(ItemTypes.Sabre, Resources.Sabre);
         itemIconMap.Add(ItemTypes.Staff, Resources.Staff);
         itemIconMap.Add(ItemTypes.Chaos, Resources.SpellChaos);
         itemIconMap.Add(ItemTypes.Demon, Resources.SpellDemon);
         itemIconMap.Add(ItemTypes.Cloak, Resources.Cloak);
         itemIconMap.Add(ItemTypes.BigShield, Resources.BigShield);
         itemIconMap.Add(ItemTypes.BigHelmet, Resources.BigHelmet);
         itemIconMap.Add(ItemTypes.OpalRing, Resources.OpalRing);
         itemIconMap.Add(ItemTypes.Club, Resources.Mace);
         itemIconMap.Add(ItemTypes.Topaz, Resources.Topaz);
         itemIconMap.Add(ItemTypes.Opal, Resources.Opal);
         itemIconMap.Add(ItemTypes.StoneFoot, Resources.SpellStoneFoot);
         itemIconMap.Add(ItemTypes.Lightning, Resources.SpellLightning);
         itemIconMap.Add(ItemTypes.DragonTooth, Resources.DragonsTooth);
         itemIconMap.Add(ItemTypes.SunsEdge, Resources.SunsEdge);
         itemIconMap.Add(ItemTypes.SilverBow, Resources.SilverBow);
         itemIconMap.Add(ItemTypes.Bubble, Resources.Bubble);
         itemIconMap.Add(ItemTypes.Faithful, Resources.Faithful);
         itemIconMap.Add(ItemTypes.SunBow, Resources.SunBow);
         itemIconMap.Add(ItemTypes.Chock, Resources.Chock);
         itemIconMap.Add(ItemTypes.BloodTaste, Resources.BloodTaste);
         itemIconMap.Add(ItemTypes.SunArmour, Resources.SunArmor);
         itemIconMap.Add(ItemTypes.ElvenCloak, Resources.ElvenCloak);
         itemIconMap.Add(ItemTypes.Focus, Resources.Focus);
         itemIconMap.Add(ItemTypes.Terror, Resources.SpellTerror);
         itemIconMap.Add(ItemTypes.Berzerk, Resources.SpellBerzerk);
         itemIconMap.Add(ItemTypes.Protection, Resources.SpellProtection);
         itemIconMap.Add(ItemTypes.Leadball, Resources.LeadBall);
         itemIconMap.Add(ItemTypes.WoodenShield, Resources.WoodenShield);
         itemIconMap.Add(ItemTypes.Wakizashi, Resources.Wakizashi);
         itemIconMap.Add(ItemTypes.SunHelmet, Resources.SunHelmet);
         itemIconMap.Add(ItemTypes.SunShield, Resources.SunShield);
         itemIconMap.Add(ItemTypes.ThunderStorm, Resources.SpellThunderstorm);
         itemIconMap.Add(ItemTypes.HyperSpace, Resources.SpellHyperspace);
         itemIconMap.Add(ItemTypes.Panic, Resources.SpellPanic);
         itemIconMap.Add(ItemTypes.ShootingStar, Resources.ShootingStar);
         itemIconMap.Add(ItemTypes.Inferno, Resources.SpellInferno);
         itemIconMap.Add(ItemTypes.Negator, Resources.Negater);
         itemIconMap.Add(ItemTypes.ChainNBall, Resources.BallAndChain);
         itemIconMap.Add(ItemTypes.SunGloves, Resources.SunGloves);
         itemIconMap.Add(ItemTypes.Delay, Resources.SpellDelay);
         itemIconMap.Add(ItemTypes.GhostBlade, Resources.GhostBlade);
         itemIconMap.Add(ItemTypes.Enchant, Resources.Enchant);
         itemIconMap.Add(ItemTypes.Purify, Resources.SpellPurify);



         NameMap = new SortedDictionary<ItemTypes, String>();
         NameMap.Add(ItemTypes.Sword, "Sword");
         NameMap.Add(ItemTypes.h2Sword, "2H Sword");
         NameMap.Add(ItemTypes.Axe, "Axe");
         NameMap.Add(ItemTypes.Dagger, "Dagger");
         NameMap.Add(ItemTypes.Bow, "Bow");
         NameMap.Add(ItemTypes.Crossbow, "Crossbow");
         NameMap.Add(ItemTypes.ThrowingStar, "Throwing Star");
         NameMap.Add(ItemTypes.Fireblade, "Fireblade");
         NameMap.Add(ItemTypes.Helmet, "Helmet");
         NameMap.Add(ItemTypes.Shield, "Shield");
         NameMap.Add(ItemTypes.Leather, "Leather");
         NameMap.Add(ItemTypes.Armour, "Armour");
         NameMap.Add(ItemTypes.Emerald, "Emerald");
         NameMap.Add(ItemTypes.EmeraldRing, "Emerald Ring");
         NameMap.Add(ItemTypes.Arrows, "Arrows");
         NameMap.Add(ItemTypes.StuddedLeather, "Studded Leather");
         NameMap.Add(ItemTypes.LightningBolt, "Lightning Bolt");
         NameMap.Add(ItemTypes.FireBall, "FireBall");
         NameMap.Add(ItemTypes.Portal, "Portal");
         NameMap.Add(ItemTypes.Air, "Air");
         NameMap.Add(ItemTypes.Fire, "Fire");
         NameMap.Add(ItemTypes.Water, "Water");
         NameMap.Add(ItemTypes.Earth, "Earth");
         NameMap.Add(ItemTypes.Skeleton, "Skeleton");
         NameMap.Add(ItemTypes.Zombie, "Zombie");
         NameMap.Add(ItemTypes.Vision, "Vision");
         NameMap.Add(ItemTypes.Phantom, "Phantom");
         NameMap.Add(ItemTypes.Slayer, "Slayer");
         NameMap.Add(ItemTypes.FastFeet, "FastFeet");
         NameMap.Add(ItemTypes.Heal, "Heal");
         NameMap.Add(ItemTypes.StoneAxe, "StoneAxe");
         NameMap.Add(ItemTypes.Gloves, "Gloves");
         NameMap.Add(ItemTypes.Darkness, "Darkness");
         NameMap.Add(ItemTypes.Sabre, "Sabre");
         NameMap.Add(ItemTypes.Staff, "Staff");
         NameMap.Add(ItemTypes.Chaos, "Chaos");
         NameMap.Add(ItemTypes.Demon, "Demon");
         NameMap.Add(ItemTypes.Cloak, "Cloak");
         NameMap.Add(ItemTypes.BigShield, "Big Shield");
         NameMap.Add(ItemTypes.BigHelmet, "Big Helmet");
         NameMap.Add(ItemTypes.OpalRing, "Opal Ring");
         NameMap.Add(ItemTypes.Club, "Club");
         NameMap.Add(ItemTypes.Topaz, "Topaz");
         NameMap.Add(ItemTypes.Opal, "Opal");
         NameMap.Add(ItemTypes.StoneFoot, "Stone Foot");
         NameMap.Add(ItemTypes.Lightning, "Lightning");
         NameMap.Add(ItemTypes.DragonTooth, "Dragon Tooth");
         NameMap.Add(ItemTypes.SunsEdge, "Suns Edge");
         NameMap.Add(ItemTypes.SilverBow, "SilverBow");
         NameMap.Add(ItemTypes.Bubble, "Bubble");
         NameMap.Add(ItemTypes.Faithful, "Faithful");
         NameMap.Add(ItemTypes.SunBow, "SunBow");
         NameMap.Add(ItemTypes.Chock, "Chock");
         NameMap.Add(ItemTypes.BloodTaste, "Blood Taste");
         NameMap.Add(ItemTypes.SunArmour, "Sun Armour");
         NameMap.Add(ItemTypes.ElvenCloak, "Elven Cloak");
         NameMap.Add(ItemTypes.Focus, "Focus");
         NameMap.Add(ItemTypes.Terror, "Terror");
         NameMap.Add(ItemTypes.Berzerk, "Berzerk");
         NameMap.Add(ItemTypes.Protection, "Protection");
         NameMap.Add(ItemTypes.Leadball, "Leadball");
         NameMap.Add(ItemTypes.WoodenShield, "Wooden Shield");
         NameMap.Add(ItemTypes.Wakizashi, "Wakizashi");
         NameMap.Add(ItemTypes.SunHelmet, "Sun Helmet");
         NameMap.Add(ItemTypes.SunShield, "Sun Shield");
         NameMap.Add(ItemTypes.ThunderStorm, "Thunder Storm");
         NameMap.Add(ItemTypes.HyperSpace, "Hyper Space");
         NameMap.Add(ItemTypes.Panic, "Panic");
         NameMap.Add(ItemTypes.ShootingStar, "Shooting Star");
         NameMap.Add(ItemTypes.Inferno, "Inferno");
         NameMap.Add(ItemTypes.Negator, "Negator");
         NameMap.Add(ItemTypes.ChainNBall, "Chain n' Ball");
         NameMap.Add(ItemTypes.SunGloves, "Sun Gloves");
         NameMap.Add(ItemTypes.Delay, "Delay");
         NameMap.Add(ItemTypes.GhostBlade, "Ghost Blade");
         NameMap.Add(ItemTypes.Enchant, "Enchant");
         NameMap.Add(ItemTypes.Purify, "Purify");
         NameMap.Add(ItemTypes.Blue, "Blue");
         NameMap.Add(ItemTypes.Green, "Green");
         NameMap.Add(ItemTypes.Yellow, "Yellow");
         NameMap.Add(ItemTypes.Brown, "Brown");
         NameMap.Add(ItemTypes.Red, "Red");
         NameMap.Add(ItemTypes.Grey, "Grey");
         NameMap.Add(ItemTypes.White, "White");
         NameMap.Add(ItemTypes.Purple, "Purple");
         NameMap.Add(ItemTypes.Black, "Black");


         RequiresMap = new SortedDictionary<ItemTypes, ItemReq>();
         RequiresMap.Add(ItemTypes.Sword, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.h2Sword, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.Axe, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Dagger, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Bow, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.Crossbow, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.ThrowingStar, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Fireblade, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Helmet, ItemReq.O_REQ_HEAD);
         RequiresMap.Add(ItemTypes.Shield, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Leather, ItemReq.O_REQ_BODY);
         RequiresMap.Add(ItemTypes.Armour, ItemReq.O_REQ_BODY);
         RequiresMap.Add(ItemTypes.Emerald, ItemReq.O_REQ_NECK);
         RequiresMap.Add(ItemTypes.EmeraldRing, ItemReq.O_REQ_FINGER);
         RequiresMap.Add(ItemTypes.Arrows, ItemReq.O_REQ_NOTHING);
         RequiresMap.Add(ItemTypes.StuddedLeather, ItemReq.O_REQ_BODY);
         RequiresMap.Add(ItemTypes.LightningBolt, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.FireBall, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Portal, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Air, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Fire, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Water, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Earth, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Skeleton, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Zombie, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Vision, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Phantom, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Slayer, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.FastFeet, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Heal, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.StoneAxe, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.Gloves, ItemReq.O_REQ_HANDS);
         RequiresMap.Add(ItemTypes.Darkness, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Sabre, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Staff, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.Chaos, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Demon, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Cloak, ItemReq.O_REQ_SHOULDERS);
         RequiresMap.Add(ItemTypes.BigShield, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.BigHelmet, ItemReq.O_REQ_HEAD);
         RequiresMap.Add(ItemTypes.OpalRing, ItemReq.O_REQ_FINGER);
         RequiresMap.Add(ItemTypes.Club, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Topaz, ItemReq.O_REQ_NECK);
         RequiresMap.Add(ItemTypes.Opal, ItemReq.O_REQ_NECK);
         RequiresMap.Add(ItemTypes.StoneFoot, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Lightning, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.DragonTooth, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.SunsEdge, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.SilverBow, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.Bubble, ItemReq.O_REQ_NOTHING);
         RequiresMap.Add(ItemTypes.Faithful, ItemReq.O_REQ_NOTHING);
         RequiresMap.Add(ItemTypes.SunBow, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.Chock, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.BloodTaste, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.SunArmour, ItemReq.O_REQ_BODY);
         RequiresMap.Add(ItemTypes.ElvenCloak, ItemReq.O_REQ_SHOULDERS);
         RequiresMap.Add(ItemTypes.Focus, ItemReq.O_REQ_HANDS);
         RequiresMap.Add(ItemTypes.Terror, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Berzerk, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Protection, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Leadball, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.WoodenShield, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Wakizashi, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.SunHelmet, ItemReq.O_REQ_HEAD);
         RequiresMap.Add(ItemTypes.SunShield, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.ThunderStorm, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.HyperSpace, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Panic, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.ShootingStar, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Inferno, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Negator, ItemReq.O_REQ_NOTHING);
         RequiresMap.Add(ItemTypes.ChainNBall, ItemReq.O_REQ_TWOHANDS);
         RequiresMap.Add(ItemTypes.SunGloves, ItemReq.O_REQ_HANDS);
         RequiresMap.Add(ItemTypes.Delay, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.GhostBlade, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Enchant, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Purify, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Blue, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Green, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Yellow, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Brown, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Red, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Grey, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.White, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Purple, ItemReq.O_REQ_ONEHAND);
         RequiresMap.Add(ItemTypes.Black, ItemReq.O_REQ_ONEHAND);

      }  


    }
}
